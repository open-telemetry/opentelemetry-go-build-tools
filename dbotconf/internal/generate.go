// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package internal

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

// buildConfig constructs a dependabotConfig for all modules in the repo.
func buildConfig() (*dependabotConfig, error) {
	root, mods, err := allMods()
	if err != nil {
		return nil, err
	}

	c := &dependabotConfig{
		Version: version2,
		Updates: []update{{
			PackageEcosystem: ghPkgEco,
			Directory:        "/",
			Labels:           labels,
			Schedule:         weeklySchedule,
		}},
	}
	for _, m := range mods {
		local, err := localPath(root, m)
		if err != nil {
			return nil, err
		}

		c.Updates = append(c.Updates, update{
			PackageEcosystem: gomodPkgEco,
			Directory:        local,
			Labels:           labels,
			Schedule:         weeklySchedule,
		})
	}
	return c, nil
}

// runGenerate outputs a generated dependabot configuration for all Go modules
// contained in the repository.
func runGenerate(*cobra.Command, []string) error {
	c, err := buildConfig()
	if err != nil {
		return err
	}

	// Use a variable writer here to potentially accept this as a flag.
	w := os.Stdout
	fmt.Fprintln(w, "# File generated by dbotconf; DO NOT EDIT.")
	return yaml.NewEncoder(w).Encode(c)
}

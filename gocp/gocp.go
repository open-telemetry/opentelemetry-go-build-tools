// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bufio"
	"errors"
	"os"
	"strings"
)

// copy copies a Go file from src to dst
// with package renamed to pkg.
func copy(dest, pkg, src string) error {
	if dest == "" {
		return errors.New("gocp: destination filepath must be set")
	}
	if pkg == "" {
		return errors.New("gocp: destination package name must be set")
	}
	if src == "" {
		return errors.New("gocp: source filepath must be set")
	}

	inFile, err := os.Open(src) //nolint:gosec // This is a file generation tool that takes filepaths as input and output.
	if err != nil {
		return err
	}
	defer inFile.Close()

	outFile, err := os.Create(dest) //nolint:gosec // This is a file generation tool that takes filepaths as input and output.
	if err != nil {
		return err
	}
	defer outFile.Close()

	w := bufio.NewWriter(outFile)
	if _, err := w.WriteString("// Code generated by gocp. DO NOT EDIT.\n\n"); err != nil {
		return err
	}
	scanner := bufio.NewScanner(inFile)
	pkgReplaced := false // Rename the line with package statement only once.
	for scanner.Scan() {
		txt := scanner.Text()

		if !pkgReplaced && strings.HasPrefix(txt, "package ") {
			if _, err := w.WriteString("package " + pkg + "\n"); err != nil {
				return err
			}
			pkgReplaced = true
			continue
		}

		if _, err := w.WriteString(txt + "\n"); err != nil {
			return err
		}
	}
	if err := scanner.Err(); err != nil {
		return err
	}
	if err := w.Flush(); err != nil {
		return err
	}

	if err := outFile.Close(); err != nil {
		return err
	}
	if err := inFile.Close(); err != nil {
		return err
	}
	return nil
}

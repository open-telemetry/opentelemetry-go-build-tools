// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"go.opentelemetry.io/build-tools/githubgen"
	"sync"
)

// MockGenerator is a mock implementation of main.Generator.
//
//	func TestSomethingThatUsesGenerator(t *testing.T) {
//
//		// make and configure a mocked main.Generator
//		mockedGenerator := &MockGenerator{
//			GenerateFunc: func(data main.GithubData) error {
//				panic("mock out the Generate method")
//			},
//		}
//
//		// use mockedGenerator in code that requires main.Generator
//		// and then make assertions.
//
//	}
type MockGenerator struct {
	// GenerateFunc mocks the Generate method.
	GenerateFunc func(data main.GithubData) error

	// calls tracks calls to the methods.
	calls struct {
		// Generate holds details about calls to the Generate method.
		Generate []struct {
			// Data is the data argument value.
			Data main.GithubData
		}
	}
	lockGenerate sync.RWMutex
}

// Generate calls GenerateFunc.
func (mock *MockGenerator) Generate(data main.GithubData) error {
	if mock.GenerateFunc == nil {
		panic("MockGenerator.GenerateFunc: method is nil but Generator.Generate was just called")
	}
	callInfo := struct {
		Data main.GithubData
	}{
		Data: data,
	}
	mock.lockGenerate.Lock()
	mock.calls.Generate = append(mock.calls.Generate, callInfo)
	mock.lockGenerate.Unlock()
	return mock.GenerateFunc(data)
}

// GenerateCalls gets all the calls that were made to Generate.
// Check the length with:
//
//	len(mockedGenerator.GenerateCalls())
func (mock *MockGenerator) GenerateCalls() []struct {
	Data main.GithubData
} {
	var calls []struct {
		Data main.GithubData
	}
	mock.lockGenerate.RLock()
	calls = mock.calls.Generate
	mock.lockGenerate.RUnlock()
	return calls
}
